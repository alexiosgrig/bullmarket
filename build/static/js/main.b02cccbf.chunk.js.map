{"version":3,"sources":["apikey/apikey.js","Context/Context.js","Charts/ChartLine.js","Charts/RevenueEarning.js","Financials/Recommendation.js","Financials/BalanceSheet.js","Financials/IncomeStatement.js","NavBar/BrowseFinancial.js","Financials/CashFlow.js","Financials/BrowseBar.js","Border/Border.js","InputForm/InputForm.js","App.js","index.js"],"names":["financialmodelingprepApikey","finnhubApikey","Context","React","createContext","ChartLine","_useContext","useContext","_useContext2","Object","slicedToArray","context","_useState","useState","_useState2","info","setInfo","_useState3","_useState4","date","setDate","_fetchChartMonth","asyncToGenerator","regenerator_default","a","mark","_callee","res","data","HistoricalData","wrap","_context","prev","next","fetch","concat","sent","json","historical","t0","stockPrice","slice","map","price","close","stockDate","abrupt","reverse","stop","apply","this","arguments","useEffect","fetchChartMonth","react_default","createElement","className","id","name","onChange","e","target","value","index_modern","labels","datasets","label","fill","borderColor","tension","RevenueEarning","revenue","fetchData","setFetchData","_fetchRevenueEarningYear","element","toFixed","fetchRevenueEarningYear","backgroundColor","options","responsive","Recommendation","buy","hold","strongBuy","strongSell","dataRecommend","setDataRecommend","_fetchRecommendations","period","fetchRecommendations","plugins","title","display","text","scales","x","stacked","y","divider","checkNumbers","attribute","constant","undefined","console","log","NaN","BalanceSheet","liabilitiesandstockholdersequity","liabilities","liabilitiescurrent","commonstocksharesauthorized","cashandcashequivalentsatcarryingvalue","retainedearningsaccumulateddeficit","liabilitiesnoncurrent","propertyplantandequipmentnet","commonstocksincludingadditionalpaidincapital","commercialpaper","longtermdebtcurrent","commonstocksharesoutstanding","otherliabilitiesnoncurrent","marketablesecuritiescurrent","otherliabilitiescurrent","assetscurrent","longtermdebtnoncurrent","contractwithcustomerliabilitycurrent","nontradereceivablescurrent","commonstocksharesissued","stockholdersequity","accountsreceivablenetcurrent","accountspayablecurrent","assets","assetsnoncurrent","otherassetscurrent","otherassetsnoncurrent","inventorynet","marketablesecuritiesnoncurrent","accumulatedothercomprehensiveincomelossnetoftax","dataInfo","setDataInfo","_fetchBalanceSheet","fetchBalanceSheet","item","IncomeStatement","costofgoodsandservicessold","netincomeloss","researchanddevelopmentexpense","grossprofit","othercomprehensiveincomelossreclassificationadjustmentfromaociforsaleofsecuritiesnetoftax","othercomprehensiveincomelossderivativeinstrumentgainlossbeforereclassificationaftertax","othercomprehensiveincomelossforeigncurrencytransactionandtranslationadjustmentnetoftax","weightedaveragenumberofdilutedsharesoutstanding","weightedaveragenumberofsharesoutstandingbasic","operatingincomeloss","nonoperatingincomeexpense","incomelossfromcontinuingoperationsbeforeincometaxesextraordinaryitemsnoncontrollinginterest","othercomprehensiveincomelossavailableforsalesecuritiesadjustmentnetoftax","earningspersharebasic","incometaxexpensebenefit","othercomprehensiveincomeunrealizedholdinggainlossonsecuritiesarisingduringperiodnetoftax","revenuefromcontractwithcustomerexcludingassessedtax","earningspersharediluted","operatingexpenses","othercomprehensiveincomelossderivativeinstrumentgainlossafterreclassificationandtax","sellinggeneralandadministrativeexpense","othercomprehensiveincomelossderivativeinstrumentgainlossreclassificationaftertax","othercomprehensiveincomelossnetoftaxportionattributabletoparent","comprehensiveincomenetoftax","_fetchCashFlow","fetchCashFlow","BrowseFinancial","react_router_dom","to","CashFlow","netIncome","depreciationAndAmortization","deferredIncomeTax","stockBasedCompensation","changeInWorkingCapital","accountsReceivables","inventory","accountsPayables","otherWorkingCapital","otherNonCashItems","netCashProvidedByOperatingActivities","investmentsInPropertyPlantAndEquipment","acquisitionsNet","purchasesOfInvestments","salesMaturitiesOfInvestments","otherInvestingActivites","netCashUsedForInvestingActivites","debtRepayment","commonStockIssued","commonStockRepurchased","dividendsPaid","otherFinancingActivites","netCashUsedProvidedByFinancingActivities","effectOfForexChangesOnCash","netChangeInCash","cashAtEndOfPeriod","cashAtBeginningOfPeriod","operatingCashFlow","capitalExpenditure","freeCashFlow","_fetchIncomeStatement","fetchIncomeStatement","BrowseBar","BrowseFinancial_BrowseFinancial","react_router","path","CashFlow_CashFlow","IncomeStatement_IncomeStatement","BalanceSheet_BalanceSheet","Border","_ref","children","nameClass","InputForm","setValue","setContext","type","toUpperCase","maxlength","onClick","preventDefault","App","Provider","BrowseBar_BrowseBar","RevenueEarning_RevenueEarning","Recommendation_Recommendation","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b02cccbf.chunk.js","sourcesContent":["export const financialmodelingprepApikey = \"27e30c366f6b2d5ccd0915478fe5bd68\";\nexport const finnhubApikey = \"c7eaef2ad3ifpe0p8dkg\";\n","import React from \"react\";\n\nexport const Context = React.createContext();\n// Creates a Context Component\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport { Context } from \"../Context/Context\";\nimport { financialmodelingprepApikey } from \"../apikey/apikey\";\n// Importing Hooks, Context, API key, and Chart\n//\n//\nexport default function ChartLine() {\n  const [context, setContext] = useContext(Context);\n  const [info, setInfo] = useState({});\n  const [date, setDate] = useState(\"Week\");\n  async function fetchChartMonth() {\n    const res = await fetch(\n      `https://financialmodelingprep.com/api/v3/historical-price-full/${context}?serietype=line&apikey=${financialmodelingprepApikey}`\n    );\n    const data = await res.json();\n    // fetching some data from financial modeling API\n    const HistoricalData = data.historical;\n    switch (date) {\n      case \"Week\":\n        setInfo({\n          stockPrice: HistoricalData.slice(0, 8).map((price) => {\n            return price.close;\n          }),\n          stockDate: HistoricalData.slice(0, 8).map((date) => {\n            return date.date;\n          }),\n        });\n        break;\n      case \"Month\":\n        setInfo({\n          stockPrice: HistoricalData.slice(0, 31)\n            .reverse()\n            .map((price) => {\n              return price.close;\n            }),\n          stockDate: HistoricalData.slice(0, 31)\n            .reverse()\n            .map((date) => {\n              return date.date;\n            }),\n        });\n        break;\n      case \"Year\":\n        setInfo({\n          stockPrice: HistoricalData.slice(0, 366)\n            .reverse()\n            .map((price) => {\n              return price.close;\n            }),\n          stockDate: HistoricalData.slice(0, 366)\n            .reverse()\n            .map((date) => {\n              return date.date;\n            }),\n        });\n        break;\n    }\n    // Checks if the user select to see a Line Chart for a year/month/week and displays the asking info\n    //\n  }\n\n  useEffect(() => {\n    fetchChartMonth();\n  }, [date, context]);\n  // using useEffect to fetch the API only when date or context changes\n\n  const handleChange = (e) => {\n    setDate(e.target.value);\n  };\n  // handleChange function sets the date according to what the user selects\n  return (\n    //selection field\n    <div className=\"ChartLine\">\n      <select id=\"cars\" name=\"cars\" onChange={handleChange}>\n        <option value=\"Week\">Week</option>\n        <option value=\"Month\">Month</option>\n        <option value=\"Year\">Year</option>\n      </select>\n      <Line // Line Chart\n        data={{\n          labels: info.stockDate,\n          datasets: [\n            {\n              label: `${context} Price:`, // Displays the the value the user Typed\n              data: info.stockPrice, // Displays the stock price's\n              fill: true,\n              borderColor: \"rgb(75,192,192)\",\n              tension: 0.1,\n            },\n          ],\n        }}\n      ></Line>\n    </div>\n  );\n}\n","import React, { useContext, useState, useEffect } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { Bar } from \"react-chartjs-2\";\nimport { Context } from \"../Context/Context\";\nimport { financialmodelingprepApikey } from \"../apikey/apikey\";\n\n//Imports Hooks, Bar Chart, Context and API key\nexport const RevenueEarning = () => {\n  const [context, setContext] = useContext(Context);\n  const [fetchData, setFetchData] = useState({\n    revenue: \"\",\n    date: \"\",\n  });\n  async function fetchRevenueEarningYear() {\n    const res = await fetch(\n      `https://financialmodelingprep.com/api/v3/income-statement/${context}?limit=120&apikey=${financialmodelingprepApikey}`\n    );\n    const data = await res.json();\n    //fetch data from financial modeling API\n    //\n    setFetchData({\n      revenue: data\n        .slice(0, 4)\n        .map((element) => element.revenue.toFixed(1) / 1000000)\n        .reverse(),\n      date: data\n        .slice(0, 4)\n        .map((element) => element.date.slice(0, 4))\n        .reverse(),\n    });\n    // Sets the state for date and revenue. Date is always for 4 years and revenue is to Millions\n    //\n  }\n  useEffect(() => {\n    fetchRevenueEarningYear();\n  }, [context]);\n  // Fetch only if the context change\n\n  const options = {\n    responsive: true,\n  };\n  const labels = fetchData.date;\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: `${context} Revenue to Millions`,\n        data: fetchData.revenue,\n        backgroundColor: \"rgba(255,99,132,0.5)\",\n      },\n    ],\n  };\n\n  return (\n    // Bar Chart\n    <div className=\"Revenue\">\n      <Bar options={options} data={data} />\n    </div>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport { Context } from \"../Context/Context\";\nimport { finnhubApikey } from \"../apikey/apikey\";\n\nexport const Recommendation = () => {\n  const [context, setContext] = useContext(Context);\n  const [dataRecommend, setDataRecommend] = useState({\n    buy: \"\",\n    hold: \"\",\n    strongBuy: \"\",\n    strongSell: \"\",\n    date: \"\",\n  });\n  async function fetchRecommendations() {\n    const res = await fetch(\n      `https://finnhub.io/api/v1/stock/recommendation?symbol=${context}&token=${finnhubApikey}`\n    );\n    const data = await res.json();\n    setDataRecommend({\n      buy: data\n        .map((data) => {\n          return data.buy;\n        })\n        .reverse(),\n      hold: data\n        .map((data) => {\n          return data.hold;\n        })\n        .reverse(),\n      strongBuy: data\n        .map((data) => {\n          return data.strongBuy;\n        })\n        .reverse(),\n      strongSell: data\n        .map((data) => {\n          return data.strongSell;\n        })\n        .reverse(),\n      date: data\n        .map((data) => {\n          return data.period;\n        })\n        .reverse(),\n    });\n  }\n  useEffect(() => fetchRecommendations(), [context]);\n  const options = {\n    plugins: {\n      title: {\n        display: true,\n        text: \"Chart.js Bar Chart - Stacked\",\n      },\n    },\n    responsive: true,\n    scales: {\n      x: {\n        stacked: true,\n      },\n      y: {\n        stacked: true,\n      },\n    },\n  };\n\n  const labels = dataRecommend.date;\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: \"Strong Sell\",\n        data: dataRecommend.strongSell,\n        backgroundColor: \"rgb(255, 99, 132)\",\n      },\n      {\n        label: \"Hold\",\n        data: dataRecommend.hold,\n        backgroundColor: \"rgb(255, 255, 102)\",\n      },\n      {\n        label: \"Buy\",\n        data: dataRecommend.buy,\n        backgroundColor: \"rgb(75, 192, 192)\",\n      },\n      {\n        label: \"Strong Buy\",\n        data: dataRecommend.strongBuy,\n        backgroundColor: \"rgb(0, 255, 0)\",\n      },\n    ],\n  };\n  return (\n    <div>\n      <Bar options={options} data={data}></Bar>\n    </div>\n  );\n};\n","// A Component that has data tables for a stock's Balance sheet\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { financialmodelingprepApikey } from \"../apikey/apikey\";\nimport { Context } from \"../Context/Context\";\n// Importing Hooks, Context and API key\nexport const divider = 1000000;\nexport const checkNumbers = (attribute, constant) => {\n  if (attribute === undefined) {\n    console.log(attribute);\n    return (attribute = \"-\");\n  } else if (attribute === NaN) {\n    return attribute;\n  } else if (constant) {\n    return attribute / constant;\n  } else {\n    return attribute;\n  }\n};\nconsole.log(checkNumbers(10000000000000, divider));\nexport const BalanceSheet = () => {\n  const [context, setContext] = useContext(Context);\n  const [dataInfo, setDataInfo] = useState({\n    date: [],\n    liabilitiesandstockholdersequity: [],\n    liabilities: [],\n    liabilitiescurrent: [],\n    commonstocksharesauthorized: [],\n    cashandcashequivalentsatcarryingvalue: [],\n    retainedearningsaccumulateddeficit: [],\n    liabilitiesnoncurrent: [],\n    propertyplantandequipmentnet: [],\n    commonstocksincludingadditionalpaidincapital: [],\n    commercialpaper: [],\n    longtermdebtcurrent: [],\n    commonstocksharesoutstanding: [],\n    otherliabilitiesnoncurrent: [],\n    marketablesecuritiescurrent: [],\n    otherliabilitiescurrent: [],\n    assetscurrent: [],\n    longtermdebtnoncurrent: [],\n    contractwithcustomerliabilitycurrent: [],\n    nontradereceivablescurrent: [],\n    commonstocksharesissued: [],\n    stockholdersequity: [],\n    accountsreceivablenetcurrent: [],\n    accountspayablecurrent: [],\n    assets: [],\n    assetsnoncurrent: [],\n    otherassetscurrent: [],\n    otherassetsnoncurrent: [],\n    inventorynet: [],\n    marketablesecuritiesnoncurrent: [],\n    accumulatedothercomprehensiveincomelossnetoftax: [],\n  });\n  //Initialize some data that we will need to add when we fetch the API\n  //\n  useEffect(() => {\n    fetchBalanceSheet();\n  }, [context]);\n  // Fetch when context changes\n  //\n  async function fetchBalanceSheet() {\n    const res = await fetch(\n      `https://financialmodelingprep.com/api/v3/balance-sheet-statement-as-reported/${context}?limit=10&apikey=${financialmodelingprepApikey}`\n    );\n    const data = await res.json();\n    // fetch financial model API\n    //\n    //\n    console.log(typeof data.date);\n    // Function\n    setDataInfo({\n      date: data\n        .map((element) => checkNumbers(element.date))\n        .slice(0, 4)\n        .reverse(),\n      //\n      liabilitiesandstockholdersequity: data\n        .map((element) =>\n          checkNumbers(element.liabilitiesandstockholdersequity, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n\n      //\n      liabilities: data\n        .map((element) => checkNumbers(element.liabilities, divider))\n        .slice(0, 4)\n        .reverse(),\n      liabilitiescurrent: data\n        .map((element) => checkNumbers(element.liabilitiescurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      commonstocksharesauthorized: data\n        .map((element) =>\n          checkNumbers(element.commonstocksharesauthorized, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      cashandcashequivalentsatcarryingvalue: data\n        .map((element) =>\n          checkNumbers(element.cashandcashequivalentsatcarryingvalue, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      retainedearningsaccumulateddeficit: data\n        .map((element) =>\n          checkNumbers(element.retainedearningsaccumulateddeficit, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      liabilitiesnoncurrent: data\n        .map((element) => checkNumbers(element.liabilitiesnoncurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      propertyplantandequipmentnet: data\n        .map((element) =>\n          checkNumbers(element.propertyplantandequipmentnet, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      commonstocksincludingadditionalpaidincapital: data\n        .map((element) =>\n          checkNumbers(\n            element.commonstocksincludingadditionalpaidincapital,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n      commercialpaper: data\n        .map((element) => checkNumbers(element.commercialpaper, divider))\n        .slice(0, 4)\n        .reverse(),\n      longtermdebtcurrent: data\n        .map((element) => checkNumbers(element.longtermdebtcurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      commonstocksharesoutstanding: data\n        .map((element) =>\n          checkNumbers(element.commonstocksharesoutstanding, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      otherliabilitiesnoncurrent: data\n        .map((element) =>\n          checkNumbers(element.otherliabilitiesnoncurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      marketablesecuritiescurrent: data\n        .map((element) =>\n          checkNumbers(element.marketablesecuritiescurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      otherliabilitiescurrent: data\n        .map((element) =>\n          checkNumbers(element.otherliabilitiescurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      assetscurrent: data\n        .map((element) => checkNumbers(element.assetscurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      longtermdebtnoncurrent: data\n        .map((element) => checkNumbers(element.longtermdebtnoncurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      contractwithcustomerliabilitycurrent: data\n        .map((element) =>\n          checkNumbers(element.contractwithcustomerliabilitycurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      nontradereceivablescurrent: data\n        .map((element) =>\n          checkNumbers(element.nontradereceivablescurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      commonstocksharesissued: data\n        .map((element) =>\n          checkNumbers(element.commonstocksharesissued, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      stockholdersequity: data\n        .map((element) => checkNumbers(element.stockholdersequity, divider))\n        .slice(0, 4)\n        .reverse(),\n      accountsreceivablenetcurrent: data\n        .map((element) =>\n          checkNumbers(element.accountsreceivablenetcurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      accountspayablecurrent: data\n        .map((element) => checkNumbers(element.accountspayablecurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      assets: data\n        .map((element) => checkNumbers(element.assets, divider))\n        .slice(0, 4)\n        .reverse(),\n      assetsnoncurrent: data\n        .map((element) => checkNumbers(element.assetsnoncurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      otherassetscurrent: data\n        .map((element) => checkNumbers(element.otherassetscurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      otherassetsnoncurrent: data\n        .map((element) => checkNumbers(element.otherassetsnoncurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      inventorynet: data\n        .map((element) => checkNumbers(element.inventorynet, divider))\n        .slice(0, 4)\n        .reverse(),\n      marketablesecuritiesnoncurrent: data\n        .map((element) =>\n          checkNumbers(element.marketablesecuritiesnoncurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      accumulatedothercomprehensiveincomelossnetoftax: data\n        .map((element) =>\n          checkNumbers(\n            element.accumulatedothercomprehensiveincomelossnetoftax,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n    });\n  }\n  return (\n    <div>\n      <h1> Balance Sheet</h1>\n      <table>\n        <tbody>\n          <tr>\n            <th>About</th>\n            {dataInfo.date.map((item) => (\n              <th>{item}</th>\n            ))}\n          </tr>\n          <tr>\n            <td> Liabilities and Stockholders Equity</td>\n            {dataInfo.liabilitiesandstockholdersequity.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Liabilities</td>\n            {dataInfo.liabilities.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Liabilities Current</td>\n            {dataInfo.liabilitiescurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Common Stock Shares Authorized</td>\n            {dataInfo.commonstocksharesauthorized.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Cash and Cash Equivalents at carry ingvalue</td>\n            {dataInfo.cashandcashequivalentsatcarryingvalue.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Retained earnings accumulated deficit</td>\n            {dataInfo.retainedearningsaccumulateddeficit.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Liabilities non-current</td>\n            {dataInfo.liabilitiesnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Cost of goods and services sold</td>\n            {dataInfo.liabilitiesnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Property Plant and Equipment Net</td>\n            {dataInfo.propertyplantandequipmentnet.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Common stocks Including additional paid in capital</td>\n            {dataInfo.commonstocksincludingadditionalpaidincapital.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td> Long Term Debt Current </td>\n            {dataInfo.longtermdebtcurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Common Stock Shares Outstanding </td>\n            {dataInfo.commonstocksharesoutstanding.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Liabilities Non-current </td>\n            {dataInfo.otherliabilitiesnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Marketable Securities Current </td>\n            {dataInfo.marketablesecuritiescurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Liabilities Current </td>\n            {dataInfo.otherliabilitiescurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Assets Current </td>\n            {dataInfo.assetscurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Long Term Debt Non-Current </td>\n            {dataInfo.longtermdebtnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Contract with Customer Liability Current </td>\n            {dataInfo.contractwithcustomerliabilitycurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Non-Trade Receivables Current </td>\n            {dataInfo.nontradereceivablescurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Common Stock Shares Issued </td>\n            {dataInfo.commonstocksharesissued.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Stock Holders Equity </td>\n            {dataInfo.stockholdersequity.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Accounts Receivable Net Current </td>\n            {dataInfo.accountsreceivablenetcurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Accounts Payable Current </td>\n            {dataInfo.accountspayablecurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Assets </td>\n            {dataInfo.assets.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Assets Non-Current </td>\n            {dataInfo.assetsnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Assets Non-Current </td>\n            {dataInfo.otherassetsnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Inventory Net </td>\n            {dataInfo.inventorynet.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Marketable Securities Non-Current </td>\n            {dataInfo.marketablesecuritiesnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Accumulated Other Comprehensive Income Loss Net of Tax </td>\n            {dataInfo.accumulatedothercomprehensiveincomelossnetoftax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td> Other Assets Current </td>\n            {dataInfo.otherassetscurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Context } from \"../Context/Context\";\nimport { financialmodelingprepApikey } from \"../apikey/apikey\";\nimport { divider } from \"./BalanceSheet\";\nimport { checkNumbers } from \"./BalanceSheet\";\n\nexport const IncomeStatement = () => {\n  const [context, setContext] = useContext(Context);\n  const [dataInfo, setDataInfo] = useState({\n    date: [],\n    costofgoodsandservicessold: [],\n    netincomeloss: [],\n    researchanddevelopmentexpense: [],\n    grossprofit: [],\n    othercomprehensiveincomelossreclassificationadjustmentfromaociforsaleofsecuritiesnetoftax:\n      [],\n    othercomprehensiveincomelossderivativeinstrumentgainlossbeforereclassificationaftertax:\n      [],\n    othercomprehensiveincomelossforeigncurrencytransactionandtranslationadjustmentnetoftax:\n      [],\n    weightedaveragenumberofdilutedsharesoutstanding: [],\n    weightedaveragenumberofsharesoutstandingbasic: [],\n    operatingincomeloss: [],\n    nonoperatingincomeexpense: [],\n    incomelossfromcontinuingoperationsbeforeincometaxesextraordinaryitemsnoncontrollinginterest:\n      [],\n    othercomprehensiveincomelossavailableforsalesecuritiesadjustmentnetoftax:\n      [],\n    earningspersharebasic: [],\n    incometaxexpensebenefit: [],\n    othercomprehensiveincomeunrealizedholdinggainlossonsecuritiesarisingduringperiodnetoftax:\n      [],\n    revenuefromcontractwithcustomerexcludingassessedtax: [],\n    earningspersharediluted: [],\n    operatingexpenses: [],\n    othercomprehensiveincomelossderivativeinstrumentgainlossafterreclassificationandtax:\n      [],\n    sellinggeneralandadministrativeexpense: [],\n    othercomprehensiveincomelossderivativeinstrumentgainlossreclassificationaftertax:\n      [],\n    othercomprehensiveincomelossnetoftaxportionattributabletoparent: [],\n    comprehensiveincomenetoftax: [],\n  });\n\n  async function fetchCashFlow() {\n    const res = await fetch(\n      `https://financialmodelingprep.com/api/v3/income-statement-as-reported/${context}?limit=10&apikey=${financialmodelingprepApikey}`\n    );\n    const data = await res.json();\n    console.log(data.date);\n    setDataInfo({\n      date: data\n        .map((element) => checkNumbers(element.date))\n        .slice(0, 4)\n        .reverse(),\n      costofgoodsandservicessold: data\n        .map((element) =>\n          checkNumbers(element.costofgoodsandservicessold, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      netincomeloss: data\n        .map((element) => checkNumbers(element.netincomeloss, divider))\n        .slice(0, 4)\n        .reverse(),\n      researchanddevelopmentexpense: data\n        .map((element) =>\n          checkNumbers(element.researchanddevelopmentexpense, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      grossprofit: data\n        .map((element) => checkNumbers(element.grossprofit, divider))\n        .slice(0, 4)\n        .reverse(),\n      othercomprehensiveincomelossreclassificationadjustmentfromaociforsaleofsecuritiesnetoftax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomelossreclassificationadjustmentfromaociforsaleofsecuritiesnetoftax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      othercomprehensiveincomelossderivativeinstrumentgainlossbeforereclassificationaftertax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomelossreclassificationadjustmentfromaociforsaleofsecuritiesnetoftax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      othercomprehensiveincomelossforeigncurrencytransactionandtranslationadjustmentnetoftax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomelossforeigncurrencytransactionandtranslationadjustmentnetoftax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      weightedaveragenumberofdilutedsharesoutstanding: data\n        .map((element) =>\n          checkNumbers(\n            element.weightedaveragenumberofdilutedsharesoutstanding,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n      weightedaveragenumberofsharesoutstandingbasic: data\n        .map((element) =>\n          checkNumbers(\n            element.weightedaveragenumberofsharesoutstandingbasic,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n      operatingincomeloss: data\n        .map((element) => checkNumbers(element.operatingincomeloss, divider))\n        .slice(0, 4)\n        .reverse(),\n      nonoperatingincomeexpense: data\n        .map((element) =>\n          checkNumbers(element.nonoperatingincomeexpense, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      incomelossfromcontinuingoperationsbeforeincometaxesextraordinaryitemsnoncontrollinginterest:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.incomelossfromcontinuingoperationsbeforeincometaxesextraordinaryitemsnoncontrollinginterest,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      othercomprehensiveincomelossavailableforsalesecuritiesadjustmentnetoftax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomelossavailableforsalesecuritiesadjustmentnetoftax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      earningspersharebasic: data\n        .map((element) => checkNumbers(element.earningspersharebasic))\n        .slice(0, 4)\n        .reverse(),\n      incometaxexpensebenefit: data\n        .map((element) =>\n          checkNumbers(element.incometaxexpensebenefit, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      othercomprehensiveincomeunrealizedholdinggainlossonsecuritiesarisingduringperiodnetoftax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomeunrealizedholdinggainlossonsecuritiesarisingduringperiodnetoftax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      revenuefromcontractwithcustomerexcludingassessedtax: data\n        .map((element) =>\n          checkNumbers(\n            element.revenuefromcontractwithcustomerexcludingassessedtax,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n      earningspersharediluted: data\n        .map((element) => checkNumbers(element.earningspersharediluted))\n        .slice(0, 4)\n        .reverse(),\n      operatingexpenses: data\n        .map((element) => checkNumbers(element.operatingexpenses, divider))\n        .slice(0, 4)\n        .reverse(),\n      othercomprehensiveincomelossderivativeinstrumentgainlossafterreclassificationandtax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomelossderivativeinstrumentgainlossafterreclassificationandtax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      sellinggeneralandadministrativeexpense: data\n        .map((element) =>\n          checkNumbers(element.sellinggeneralandadministrativeexpense, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      othercomprehensiveincomelossderivativeinstrumentgainlossreclassificationaftertax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomelossderivativeinstrumentgainlossreclassificationaftertax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      othercomprehensiveincomelossnetoftaxportionattributabletoparent: data\n        .map((element) =>\n          checkNumbers(\n            element.othercomprehensiveincomelossnetoftaxportionattributabletoparent,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n      comprehensiveincomenetoftax: data\n        .map((element) =>\n          checkNumbers(element.comprehensiveincomenetoftax, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n    });\n  }\n  useEffect(() => {\n    fetchCashFlow();\n  }, [context]);\n  console.log(\n    dataInfo.date,\n    dataInfo.othercomprehensiveincomelossnetoftaxportionattributabletoparent\n  );\n  return (\n    <div>\n      <h1> Income Statement </h1>\n      <h6> Numbers to Millions</h6>\n      <table id=\"simple-board\">\n        <tbody>\n          <tr>\n            <th>About</th>\n            {dataInfo.date.map((item) => (\n              <th>{item}</th>\n            ))}\n          </tr>\n          <tr>\n            <td> Cost of goods and services sold</td>\n            {dataInfo.costofgoodsandservicessold.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Net Income Loss</td>\n            {dataInfo.netincomeloss.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Research And Development Expense</td>\n            {dataInfo.researchanddevelopmentexpense.map((item) => (\n              <td> {item === \"\" ? \"N/A\" : item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Gross Profit </td>\n            {dataInfo.grossprofit.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Reclassification Adjustment From a\n              OCI for Sale of securities net of tax\n            </td>\n            {dataInfo.othercomprehensiveincomelossreclassificationadjustmentfromaociforsaleofsecuritiesnetoftax.map(\n              (item) => (\n                <td> {item === NaN ? \"\" : item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Derivative Instrument Gain Loss\n              Before Reclassification After Tax\n            </td>\n            {dataInfo.othercomprehensiveincomelossderivativeinstrumentgainlossafterreclassificationandtax.map(\n              (item) => (\n                <td> {item == NaN ? \"\" : item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Foreign Currency Transaction And\n              Translation Adjustment Net of Tax\n            </td>\n            {dataInfo.othercomprehensiveincomelossforeigncurrencytransactionandtranslationadjustmentnetoftax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Weighted Average Number Of Diluted Shares Outstanding</td>\n            {dataInfo.weightedaveragenumberofdilutedsharesoutstanding.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Weighted Average Number Of Shares Outstanding Basic</td>\n            {dataInfo.weightedaveragenumberofsharesoutstandingbasic.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Operating Income Loss</td>\n            {dataInfo.operatingincomeloss.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Non-Operating Income Expense</td>\n            {dataInfo.nonoperatingincomeexpense.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>\n              Income Loss From Continuing Operations Before Income Taxes\n              Extraordinary Items Non-Controlling Interest\n            </td>\n            {dataInfo.incomelossfromcontinuingoperationsbeforeincometaxesextraordinaryitemsnoncontrollinginterest.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Available For Sale Securities\n              Adjustment Net of Tax\n            </td>\n            {dataInfo.othercomprehensiveincomelossavailableforsalesecuritiesadjustmentnetoftax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Earnings per Share Basic</td>\n            {dataInfo.earningspersharebasic.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Income Tax Expense Benefit</td>\n            {dataInfo.incometaxexpensebenefit.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Unrealized Holding Gain Loss On\n              Securities a Rising During Period Net of Tax\n            </td>\n            {dataInfo.othercomprehensiveincomeunrealizedholdinggainlossonsecuritiesarisingduringperiodnetoftax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Revenue From Contract With Customer Excluding Assessed Tax</td>\n            {dataInfo.revenuefromcontractwithcustomerexcludingassessedtax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Earnings per Share Diluted</td>\n            {dataInfo.earningspersharediluted.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Operating Expenses</td>\n            {dataInfo.operatingexpenses.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Derivative Instrument Gain Loss\n              After Reclassification And Tax\n            </td>\n            {dataInfo.othercomprehensiveincomelossderivativeinstrumentgainlossafterreclassificationandtax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Selling General And Admin Is Rative Expense</td>\n            {dataInfo.sellinggeneralandadministrativeexpense.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Derivative Instrument Gain Loss\n              Reclassification After Tax\n            </td>\n            {dataInfo.othercomprehensiveincomelossderivativeinstrumentgainlossreclassificationaftertax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Net of Tax Portion Attributable to\n              Parent\n            </td>\n            {dataInfo.othercomprehensiveincomelossnetoftaxportionattributabletoparent.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Comprehensive Income Net of Tax</td>\n            {dataInfo.comprehensiveincomenetoftax.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"../css/App.css\";\nimport { BrowserRouter, Routes, Switch, Route, Link } from \"react-router-dom\";\n\nexport const BrowseFinancial = () => {\n  return (\n    <div>\n      <ul className=\"BrowserUl\">\n        <Link to=\"/cashflow\">\n          <li className=\"BrowserLi\"> CashFlow </li>\n        </Link>\n        <Link to=\"/incomestatement\">\n          <li className=\"BrowserLi\"> Income Statement </li>\n        </Link>\n\n        <Link to=\"/balancesheet\">\n          <li className=\"BrowserLi\"> Balance Sheet</li>\n        </Link>\n      </ul>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { financialmodelingprepApikey } from \"../apikey/apikey\";\nimport { Context } from \"../Context/Context\";\nimport { checkNumbers } from \"./BalanceSheet\";\nimport { divider } from \"./BalanceSheet\";\nexport const CashFlow = () => {\n  const [context, setContext] = useContext(Context);\n  const [dataInfo, setDataInfo] = useState({\n    date: [],\n    netIncome: [],\n    netincomeloss: [],\n    depreciationAndAmortization: [],\n    deferredIncomeTax: [],\n    stockBasedCompensation: [],\n    changeInWorkingCapital: [],\n    accountsReceivables: [],\n    inventory: [],\n    accountsPayables: [],\n    otherWorkingCapital: [],\n    otherNonCashItems: [],\n    netCashProvidedByOperatingActivities: [],\n    investmentsInPropertyPlantAndEquipment: [],\n    acquisitionsNet: [],\n    purchasesOfInvestments: [],\n    salesMaturitiesOfInvestments: [],\n    otherInvestingActivites: [],\n    netCashUsedForInvestingActivites: [],\n    debtRepayment: [],\n    commonStockIssued: [],\n    commonStockRepurchased: [],\n    dividendsPaid: [],\n    otherFinancingActivites: [],\n    netCashUsedProvidedByFinancingActivities: [],\n    effectOfForexChangesOnCash: [],\n    netChangeInCash: [],\n    cashAtEndOfPeriod: [],\n    cashAtBeginningOfPeriod: [],\n    operatingCashFlow: [],\n    capitalExpenditure: [],\n    freeCashFlow: [],\n  });\n\n  async function fetchIncomeStatement() {\n    const res = await fetch(\n      `https://financialmodelingprep.com/api/v3/cash-flow-statement/${context}?limit=120&apikey=${financialmodelingprepApikey}`\n    );\n    const data = await res.json();\n    setDataInfo({\n      date: data\n        .map((element) => checkNumbers(element.date))\n        .slice(0, 4)\n        .reverse(),\n      netIncome: data\n        .map((element) => checkNumbers(element.netIncome, divider))\n        .slice(0, 4)\n        .reverse(),\n      netincomeloss: data\n        .map((element) => checkNumbers(element.netincomeloss, divider))\n        .slice(0, 4)\n        .reverse(),\n      depreciationAndAmortization: data\n        .map((element) =>\n          checkNumbers(element.depreciationAndAmortization, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      deferredIncomeTax: data\n        .map((element) => checkNumbers(element.deferredIncomeTax, divider))\n        .slice(0, 4)\n        .reverse(),\n      stockBasedCompensation: data\n        .map((element) => checkNumbers(element.stockBasedCompensation, divider))\n        .slice(0, 4)\n        .reverse(),\n      changeInWorkingCapital: data\n        .map((element) => checkNumbers(element.changeInWorkingCapital, divider))\n        .slice(0, 4)\n        .reverse(),\n      accountsReceivables: data\n        .map((element) => checkNumbers(element.accountsReceivables, divider))\n        .slice(0, 4)\n        .reverse(),\n      inventory: data\n        .map((element) => checkNumbers(element.inventory, divider))\n        .slice(0, 4)\n        .reverse(),\n      accountsPayables: data\n        .map((element) => checkNumbers(element.accountsPayables, divider))\n        .slice(0, 4)\n        .reverse(),\n      otherWorkingCapital: data\n        .map((element) => checkNumbers(element.otherWorkingCapital, divider))\n        .slice(0, 4)\n        .reverse(),\n      otherNonCashItems: data\n        .map((element) => checkNumbers(element.otherNonCashItems, divider))\n        .slice(0, 4)\n        .reverse(),\n      netCashProvidedByOperatingActivities: data\n        .map((element) =>\n          checkNumbers(element.netCashProvidedByOperatingActivities, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      investmentsInPropertyPlantAndEquipment: data\n        .map((element) =>\n          checkNumbers(element.investmentsInPropertyPlantAndEquipment, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      acquisitionsNet: data\n        .map((element) => checkNumbers(element.acquisitionsNet, divider))\n        .slice(0, 4)\n        .reverse(),\n      purchasesOfInvestments: data\n        .map((element) => checkNumbers(element.purchasesOfInvestments, divider))\n        .slice(0, 4)\n        .reverse(),\n      salesMaturitiesOfInvestments: data\n        .map((element) =>\n          checkNumbers(element.salesMaturitiesOfInvestments, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      otherInvestingActivites: data\n        .map((element) =>\n          checkNumbers(element.otherInvestingActivites, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      netCashUsedForInvestingActivites: data\n        .map((element) =>\n          checkNumbers(element.netCashUsedForInvestingActivites, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      debtRepayment: data\n        .map((element) => checkNumbers(element.debtRepayment, divider))\n        .slice(0, 4)\n        .reverse(),\n      commonStockIssued: data\n        .map((element) => checkNumbers(element.commonStockIssued, divider))\n        .slice(0, 4)\n        .reverse(),\n      commonStockRepurchased: data\n        .map((element) => checkNumbers(element.commonStockRepurchased, divider))\n        .slice(0, 4)\n        .reverse(),\n      dividendsPaid: data\n        .map((element) => checkNumbers(element.dividendsPaid, divider))\n        .slice(0, 4)\n        .reverse(),\n      otherFinancingActivites: data\n        .map((element) =>\n          checkNumbers(element.otherFinancingActivites, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      netCashUsedProvidedByFinancingActivities: data\n        .map((element) =>\n          checkNumbers(\n            element.netCashUsedProvidedByFinancingActivities,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n      effectOfForexChangesOnCash: data\n        .map((element) =>\n          checkNumbers(element.effectOfForexChangesOnCash, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      netChangeInCash: data\n        .map((element) => checkNumbers(element.netChangeInCash, divider))\n        .slice(0, 4)\n        .reverse(),\n      cashAtEndOfPeriod: data\n        .map((element) => checkNumbers(element.cashAtEndOfPeriod, divider))\n        .slice(0, 4)\n        .reverse(),\n      cashAtBeginningOfPeriod: data\n        .map((element) =>\n          checkNumbers(element.cashAtBeginningOfPeriod, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      operatingCashFlow: data\n        .map((element) => checkNumbers(element.operatingCashFlow, divider))\n        .slice(0, 4)\n        .reverse(),\n      capitalExpenditure: data\n        .map((element) => checkNumbers(element.capitalExpenditure, divider))\n        .slice(0, 4)\n        .reverse(),\n      freeCashFlow: data\n        .map((element) => checkNumbers(element.freeCashFlow, divider))\n        .slice(0, 4)\n        .reverse(),\n    });\n  }\n  useEffect(() => {\n    fetchIncomeStatement();\n  }, [context]);\n  return (\n    <div>\n      <h1> Income Statement</h1>\n      <h6> Numbers to Millions</h6>\n      <table>\n        <tbody>\n          <tr>\n            <th>About</th>\n            {dataInfo.date.map((item) => (\n              <th>{item}</th>\n            ))}\n          </tr>\n          <tr>\n            <td> Net Income</td>\n            {dataInfo.netIncome.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Depreciation and Amortization</td>\n            {dataInfo.depreciationAndAmortization.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Deferred Income Tax</td>\n            {dataInfo.deferredIncomeTax.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Stock Based Compensation</td>\n            {dataInfo.stockBasedCompensation.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Change In Working Capital</td>\n            {dataInfo.changeInWorkingCapital.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Accounts Receivables</td>\n            {dataInfo.accountsReceivables.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Inventory</td>\n            {dataInfo.inventory.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Accounts Payables</td>\n            {dataInfo.accountsPayables.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Working Capital</td>\n            {dataInfo.otherWorkingCapital.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Non-Cash Items</td>\n            {dataInfo.otherNonCashItems.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Net Cash Provided By Operating Activities</td>\n            {dataInfo.netCashProvidedByOperatingActivities.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Investments In Property Plant And Equipment</td>\n            {dataInfo.investmentsInPropertyPlantAndEquipment.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Acquisitions Net</td>\n            {dataInfo.acquisitionsNet.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Purchases Of Investments</td>\n            {dataInfo.purchasesOfInvestments.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Sales Maturities Of Investments</td>\n            {dataInfo.salesMaturitiesOfInvestments.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Investing Activites</td>\n            {dataInfo.otherInvestingActivites.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Net Cash Used For Investing Activites</td>\n            {dataInfo.netCashUsedForInvestingActivites.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Debt Repayment</td>\n            {dataInfo.debtRepayment.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Common Stock Issued</td>\n            {dataInfo.commonStockIssued.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Common Stock Repurchased</td>\n            {dataInfo.commonStockRepurchased.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Dividends Paid</td>\n            {dataInfo.dividendsPaid.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Financing Activites</td>\n            {dataInfo.otherFinancingActivites.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Net Cash Used Provided By Financing Activities</td>\n            {dataInfo.otherFinancingActivites.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Effect Of Forex Changes On Cash</td>\n            {dataInfo.effectOfForexChangesOnCash.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Net Change In Cash</td>\n            {dataInfo.netChangeInCash.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Cash At End Of Period</td>\n            {dataInfo.cashAtEndOfPeriod.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Cash At Beginning Of Period</td>\n            {dataInfo.cashAtBeginningOfPeriod.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Operating Cash Flow</td>\n            {dataInfo.operatingCashFlow.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Capital Expenditure</td>\n            {dataInfo.capitalExpenditure.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Free Cash Flow</td>\n            {dataInfo.freeCashFlow.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter, Routes, Switch, Route, Link } from \"react-router-dom\";\nimport { BrowseFinancial } from \"../NavBar/BrowseFinancial\";\nimport { BalanceSheet } from \"./BalanceSheet\";\nimport { IncomeStatement } from \"./IncomeStatement\";\nimport { CashFlow } from \"./CashFlow\";\n\nexport const BrowseBar = () => {\n  return (\n    <BrowserRouter>\n      <div>\n        <BrowseFinancial />\n        <Routes>\n          <Route path=\"/cashflow\" element={<CashFlow />} />\n          <Route path=\"/incomestatement\" element={<IncomeStatement />} />\n          <Route path=\"/balancesheet\" element={<BalanceSheet />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n","import React from \"react\";\nimport \"../css/App.css\";\nexport default function Border({ children, nameClass }) {\n  return <div className={nameClass}> {children}</div>;\n}\n\n// A re-usable Border Component-Container\n","import Border from \"../Border/Border\";\nimport React, { useContext } from \"react\";\nimport \"../css/App.css\";\nimport { useState, useEffect } from \"react\";\nimport { Context } from \"../Context/Context\";\n//importing Hooks and Components\n//\n//\nexport default function InputForm() {\n  const [value, setValue] = useState(\"\"); //Initiaze State\n  const [context, setContext] = useContext(Context);\n  const getValue = (e) => {\n    setValue(e.target.value.toUpperCase());\n  };\n  // getValue function sets a value typed by the user in uppercase to state\n\n  const onSubmit = (e) => {\n    setContext(value);\n    e.preventDefault();\n  };\n  // onSubmit function sets the value of the context according to what the user typed\n  return (\n    <Border nameClass=\"Border\">\n      <div className=\"InputPlacement\">\n        <p> Enter a stock symbol :</p>\n        <input type=\"text\" onChange={getValue} maxlength=\"4\"></input>\n        <h1> For example: AAPL </h1>\n        <input type=\"submit\" className=\"Submit\" onClick={onSubmit}></input>\n      </div>\n    </Border>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./css/App.css\";\nimport NavBar from \"./NavBar/NavBar\";\nimport News from \"../src/News/News\";\nimport ChartLine from \"./Charts/ChartLine\";\nimport { Context } from \"./Context/Context\";\nimport { RevenueEarning } from \"./Charts/RevenueEarning\";\nimport { Recommendation } from \"./Financials/Recommendation\";\nimport { CashFlow } from \"./Financials/IncomeStatement\";\nimport { BrowseBar } from \"./Financials/BrowseBar\";\nimport { BrowseFinancial } from \"./NavBar/BrowseFinancial\";\nimport InputForm from \"../src/InputForm/InputForm\";\nfunction App() {\n  const [context, setContext] = useState(\"AAPL\");\n  return (\n    <div className=\"App\">\n      <Context.Provider value={[context, setContext]}>\n        <InputForm></InputForm>\n        <BrowseBar></BrowseBar>\n        <ChartLine></ChartLine>\n        <RevenueEarning></RevenueEarning>\n        <Recommendation></Recommendation>\n        {/* <StockScreener></StockScreener> */}\n        {/* <NavBar></NavBar> */}\n        {/* <News></News> */}\n      </Context.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}