{"version":3,"sources":["apikey/apikey.js","Context/Context.js","Charts/ChartLine.js","Charts/RevenueEarning.js","Financials/Recommendation.js","Financials/BalanceSheet.js","Financials/IncomeStatement.js","NavBar/BrowseFinancial.js","Financials/CashFlow.js","Financials/BrowseBar.js","Border/Border.js","InputForm/InputForm.js","App.js","index.js"],"names":["financialmodelingprepApikey","finnhubApikey","Context","React","createContext","ChartLine","_useContext","useContext","_useContext2","Object","slicedToArray","context","_useState","useState","_useState2","info","setInfo","_useState3","_useState4","date","setDate","_fetchChartMonth","asyncToGenerator","regenerator_default","a","mark","_callee","res","data","HistoricalData","wrap","_context","prev","next","fetch","concat","sent","json","historical","t0","stockPrice","slice","reverse","map","price","close","stockDate","abrupt","stop","apply","this","arguments","useEffect","fetchChartMonth","react_default","createElement","className","id","name","onChange","e","target","value","index_modern","labels","datasets","label","fill","borderColor","tension","options","plugins","zoom","wheel","enabled","mode","speed","modifierKey","pan","threshold","pinch","Chart","register","zoomPlugin","RevenueEarning","revenue","fetchData","setFetchData","_fetchRevenueEarningYear","element","toFixed","fetchRevenueEarningYear","backgroundColor","responsive","Recommendation","buy","hold","strongBuy","strongSell","dataRecommend","setDataRecommend","_fetchRecommendations","period","fetchRecommendations","title","display","text","scales","x","stacked","y","divider","checkNumbers","attribute","constant","undefined","console","log","NaN","BalanceSheet","liabilitiesandstockholdersequity","liabilities","liabilitiescurrent","commonstocksharesauthorized","cashandcashequivalentsatcarryingvalue","retainedearningsaccumulateddeficit","liabilitiesnoncurrent","propertyplantandequipmentnet","commonstocksincludingadditionalpaidincapital","commercialpaper","longtermdebtcurrent","commonstocksharesoutstanding","otherliabilitiesnoncurrent","marketablesecuritiescurrent","otherliabilitiescurrent","assetscurrent","longtermdebtnoncurrent","contractwithcustomerliabilitycurrent","nontradereceivablescurrent","commonstocksharesissued","stockholdersequity","accountsreceivablenetcurrent","accountspayablecurrent","assets","assetsnoncurrent","otherassetscurrent","otherassetsnoncurrent","inventorynet","marketablesecuritiesnoncurrent","accumulatedothercomprehensiveincomelossnetoftax","dataInfo","setDataInfo","_fetchBalanceSheet","fetchBalanceSheet","item","IncomeStatement","costofgoodsandservicessold","netincomeloss","researchanddevelopmentexpense","grossprofit","othercomprehensiveincomelossreclassificationadjustmentfromaociforsaleofsecuritiesnetoftax","othercomprehensiveincomelossderivativeinstrumentgainlossbeforereclassificationaftertax","othercomprehensiveincomelossforeigncurrencytransactionandtranslationadjustmentnetoftax","weightedaveragenumberofdilutedsharesoutstanding","weightedaveragenumberofsharesoutstandingbasic","operatingincomeloss","nonoperatingincomeexpense","incomelossfromcontinuingoperationsbeforeincometaxesextraordinaryitemsnoncontrollinginterest","othercomprehensiveincomelossavailableforsalesecuritiesadjustmentnetoftax","earningspersharebasic","incometaxexpensebenefit","othercomprehensiveincomeunrealizedholdinggainlossonsecuritiesarisingduringperiodnetoftax","revenuefromcontractwithcustomerexcludingassessedtax","earningspersharediluted","operatingexpenses","othercomprehensiveincomelossderivativeinstrumentgainlossafterreclassificationandtax","sellinggeneralandadministrativeexpense","othercomprehensiveincomelossderivativeinstrumentgainlossreclassificationaftertax","othercomprehensiveincomelossnetoftaxportionattributabletoparent","comprehensiveincomenetoftax","_fetchCashFlow","fetchCashFlow","BrowseFinancial","react_router_dom","to","CashFlow","netIncome","depreciationAndAmortization","deferredIncomeTax","stockBasedCompensation","changeInWorkingCapital","accountsReceivables","inventory","accountsPayables","otherWorkingCapital","otherNonCashItems","netCashProvidedByOperatingActivities","investmentsInPropertyPlantAndEquipment","acquisitionsNet","purchasesOfInvestments","salesMaturitiesOfInvestments","otherInvestingActivites","netCashUsedForInvestingActivites","debtRepayment","commonStockIssued","commonStockRepurchased","dividendsPaid","otherFinancingActivites","netCashUsedProvidedByFinancingActivities","effectOfForexChangesOnCash","netChangeInCash","cashAtEndOfPeriod","cashAtBeginningOfPeriod","operatingCashFlow","capitalExpenditure","freeCashFlow","_fetchIncomeStatement","fetchIncomeStatement","BrowseBar","BrowseFinancial_BrowseFinancial","react_router","path","CashFlow_CashFlow","IncomeStatement_IncomeStatement","BalanceSheet_BalanceSheet","Border","_ref","children","nameClass","InputForm","setValue","setContext","type","toUpperCase","maxlength","onClick","preventDefault","App","Provider","BrowseBar_BrowseBar","RevenueEarning_RevenueEarning","Recommendation_Recommendation","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.744fb1f4.chunk.js","sourcesContent":["export const financialmodelingprepApikey = \"39caf286d742842fbd4649b05b6eff0d\";\nexport const finnhubApikey = \"c7eaef2ad3ifpe0p8dkg\";\n","import React from \"react\";\n\nexport const Context = React.createContext();\n// Creates a Context Component\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport { Context } from \"../Context/Context\";\nimport { financialmodelingprepApikey } from \"../apikey/apikey\";\nimport * as zoom from \"chartjs-plugin-zoom\";\nimport zoomPlugin from \"chartjs-plugin-zoom\";\nimport hammer from \"hammerjs\";\n\nChart.register(zoomPlugin);\n// import { zoom } from \"chartjs-plugin-zoom\";\n// Importing Hooks, Context, API key, and Chart\n//\n//\n\nexport default function ChartLine() {\n  const [context, setContext] = useContext(Context);\n  const [info, setInfo] = useState({});\n  const [date, setDate] = useState(\"Week\");\n  async function fetchChartMonth() {\n    const res = await fetch(\n      `https://financialmodelingprep.com/api/v3/historical-price-full/${context}?serietype=line&apikey=${financialmodelingprepApikey}`\n    );\n    const data = await res.json();\n    // fetching some data from financial modeling API\n    const HistoricalData = data.historical;\n    switch (date) {\n      case \"Week\":\n        setInfo({\n          stockPrice: HistoricalData.slice(0, 8)\n            .reverse()\n            .map((price) => {\n              return price.close;\n            }),\n          stockDate: HistoricalData.slice(0, 8)\n            .reverse()\n            .map((date) => {\n              return date.date;\n            }),\n        });\n        break;\n      case \"Month\":\n        setInfo({\n          stockPrice: HistoricalData.slice(0, 31)\n            .reverse()\n            .map((price) => {\n              return price.close;\n            }),\n          stockDate: HistoricalData.slice(0, 31)\n            .reverse()\n            .map((date) => {\n              return date.date;\n            }),\n        });\n        break;\n      case \"Year\":\n        setInfo({\n          stockPrice: HistoricalData.slice(0, 366)\n            .reverse()\n            .map((price) => {\n              return price.close;\n            }),\n          stockDate: HistoricalData.slice(0, 366)\n            .reverse()\n            .map((date) => {\n              return date.date;\n            }),\n        });\n        break;\n      case \"Max\":\n        setInfo({\n          stockPrice: HistoricalData.reverse().map((price) => {\n            return price.close;\n          }),\n          stockDate: HistoricalData.map((date) => {\n            return date.date;\n          }),\n        });\n    }\n    // Checks if the user select to see a Line Chart for a year/month/week and displays the asking info\n    //\n  }\n\n  useEffect(() => {\n    fetchChartMonth();\n  }, [date, context]);\n  // using useEffect to fetch the API only when date or context changes\n\n  const handleChange = (e) => {\n    setDate(e.target.value);\n  };\n  // handleChange function sets the date according to what the user selects\n  return (\n    //selection field\n    <div className=\"ChartLine\">\n      <select id=\"cars\" name=\"cars\" onChange={handleChange}>\n        <option value=\"Week\">Week</option>\n        <option value=\"Month\">Month</option>\n        <option value=\"Year\">Year</option>\n        <option value=\"Max\">Max</option>\n      </select>\n      <Line // Line Chart\n        data={{\n          labels: info.stockDate,\n          datasets: [\n            {\n              label: `${context} Price:`, // Displays the the value the user Typed\n              data: info.stockPrice, // Displays the stock price's\n              fill: true,\n              borderColor: \"rgb(75,192,192)\",\n              tension: 0.1,\n            },\n          ],\n        }}\n        options={{\n          plugins: {\n            zoom: {\n              zoom: {\n                wheel: {\n                  enabled: true, // SET SCROOL ZOOM TO TRUE\n                },\n                mode: \"xy\",\n                speed: 0.2,\n                modifierKey: \"shift\",\n              },\n              pan: {\n                enabled: true,\n                mode: \"xy\",\n                threshold: 1,\n              },\n              pinch: {\n                enabled: true,\n              },\n              mode: \"xy\",\n            },\n          },\n        }}\n      ></Line>\n    </div>\n  );\n}\n","import React, { useContext, useState, useEffect } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { Bar } from \"react-chartjs-2\";\nimport { Context } from \"../Context/Context\";\nimport { financialmodelingprepApikey } from \"../apikey/apikey\";\n\n//Imports Hooks, Bar Chart, Context and API key\nexport const RevenueEarning = () => {\n  const [context, setContext] = useContext(Context);\n  const [fetchData, setFetchData] = useState({\n    revenue: \"\",\n    date: \"\",\n  });\n  async function fetchRevenueEarningYear() {\n    const res = await fetch(\n      `https://financialmodelingprep.com/api/v3/income-statement/${context}?limit=120&apikey=${financialmodelingprepApikey}`\n    );\n    const data = await res.json();\n    //fetch data from financial modeling API\n    //\n    setFetchData({\n      revenue: data\n        .slice(0, 4)\n        .map((element) => element.revenue.toFixed(1) / 1000000)\n        .reverse(),\n      date: data\n        .slice(0, 4)\n        .map((element) => element.date.slice(0, 4))\n        .reverse(),\n    });\n    // Sets the state for date and revenue. Date is always for 4 years and revenue is to Millions\n    //\n  }\n  useEffect(() => {\n    fetchRevenueEarningYear();\n  }, [context]);\n  // Fetch only if the context change\n\n  const options = {\n    responsive: true,\n  };\n  const labels = fetchData.date;\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: `${context} Revenue to Millions`,\n        data: fetchData.revenue,\n        backgroundColor: \"rgba(255,99,132,0.5)\",\n      },\n    ],\n  };\n\n  return (\n    // Bar Chart\n    <div className=\"Revenue\">\n      <Bar options={options} data={data} />\n    </div>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport { Context } from \"../Context/Context\";\nimport { finnhubApikey } from \"../apikey/apikey\";\n\nexport const Recommendation = () => {\n  const [context, setContext] = useContext(Context);\n  const [dataRecommend, setDataRecommend] = useState({\n    buy: \"\",\n    hold: \"\",\n    strongBuy: \"\",\n    strongSell: \"\",\n    date: \"\",\n  });\n  async function fetchRecommendations() {\n    const res = await fetch(\n      `https://finnhub.io/api/v1/stock/recommendation?symbol=${context}&token=${finnhubApikey}`\n    );\n    const data = await res.json();\n    setDataRecommend({\n      buy: data\n        .map((data) => {\n          return data.buy;\n        })\n        .reverse(),\n      hold: data\n        .map((data) => {\n          return data.hold;\n        })\n        .reverse(),\n      strongBuy: data\n        .map((data) => {\n          return data.strongBuy;\n        })\n        .reverse(),\n      strongSell: data\n        .map((data) => {\n          return data.strongSell;\n        })\n        .reverse(),\n      date: data\n        .map((data) => {\n          return data.period;\n        })\n        .reverse(),\n    });\n  }\n  useEffect(() => fetchRecommendations(), [context]);\n  const options = {\n    plugins: {\n      title: {\n        display: true,\n        text: \"Chart.js Bar Chart - Stacked\",\n      },\n    },\n    responsive: true,\n    scales: {\n      x: {\n        stacked: true,\n      },\n      y: {\n        stacked: true,\n      },\n    },\n  };\n\n  const labels = dataRecommend.date;\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: \"Strong Sell\",\n        data: dataRecommend.strongSell,\n        backgroundColor: \"rgb(255, 99, 132)\",\n      },\n      {\n        label: \"Hold\",\n        data: dataRecommend.hold,\n        backgroundColor: \"rgb(255, 255, 102)\",\n      },\n      {\n        label: \"Buy\",\n        data: dataRecommend.buy,\n        backgroundColor: \"rgb(75, 192, 192)\",\n      },\n      {\n        label: \"Strong Buy\",\n        data: dataRecommend.strongBuy,\n        backgroundColor: \"rgb(0, 255, 0)\",\n      },\n    ],\n  };\n  return (\n    <div>\n      <Bar options={options} data={data}></Bar>\n    </div>\n  );\n};\n","// A Component that has data tables for a stock's Balance sheet\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { financialmodelingprepApikey } from \"../apikey/apikey\";\nimport { Context } from \"../Context/Context\";\n// Importing Hooks, Context and API key\nexport const divider = 1000000;\nexport const checkNumbers = (attribute, constant) => {\n  if (attribute === undefined) {\n    console.log(attribute);\n    return (attribute = \"-\");\n  } else if (attribute === NaN) {\n    return attribute;\n  } else if (constant) {\n    return attribute / constant;\n  } else {\n    return attribute;\n  }\n};\nexport const BalanceSheet = () => {\n  const [context, setContext] = useContext(Context);\n  const [dataInfo, setDataInfo] = useState({\n    date: [],\n    liabilitiesandstockholdersequity: [],\n    liabilities: [],\n    liabilitiescurrent: [],\n    commonstocksharesauthorized: [],\n    cashandcashequivalentsatcarryingvalue: [],\n    retainedearningsaccumulateddeficit: [],\n    liabilitiesnoncurrent: [],\n    propertyplantandequipmentnet: [],\n    commonstocksincludingadditionalpaidincapital: [],\n    commercialpaper: [],\n    longtermdebtcurrent: [],\n    commonstocksharesoutstanding: [],\n    otherliabilitiesnoncurrent: [],\n    marketablesecuritiescurrent: [],\n    otherliabilitiescurrent: [],\n    assetscurrent: [],\n    longtermdebtnoncurrent: [],\n    contractwithcustomerliabilitycurrent: [],\n    nontradereceivablescurrent: [],\n    commonstocksharesissued: [],\n    stockholdersequity: [],\n    accountsreceivablenetcurrent: [],\n    accountspayablecurrent: [],\n    assets: [],\n    assetsnoncurrent: [],\n    otherassetscurrent: [],\n    otherassetsnoncurrent: [],\n    inventorynet: [],\n    marketablesecuritiesnoncurrent: [],\n    accumulatedothercomprehensiveincomelossnetoftax: [],\n  });\n  //Initialize some data that we will need to add when we fetch the API\n  //\n  useEffect(() => {\n    fetchBalanceSheet();\n  }, [context]);\n  // Fetch when context changes\n  //\n  async function fetchBalanceSheet() {\n    const res = await fetch(\n      `https://financialmodelingprep.com/api/v3/balance-sheet-statement-as-reported/${context}?limit=10&apikey=${financialmodelingprepApikey}`\n    );\n    const data = await res.json();\n    // fetch financial model API\n    //\n    //\n    console.log(typeof data.date);\n    // Function\n    setDataInfo({\n      date: data\n        .map((element) => checkNumbers(element.date))\n        .slice(0, 4)\n        .reverse(),\n      //\n      liabilitiesandstockholdersequity: data\n        .map((element) =>\n          checkNumbers(element.liabilitiesandstockholdersequity, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n\n      //\n      liabilities: data\n        .map((element) => checkNumbers(element.liabilities, divider))\n        .slice(0, 4)\n        .reverse(),\n      liabilitiescurrent: data\n        .map((element) => checkNumbers(element.liabilitiescurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      commonstocksharesauthorized: data\n        .map((element) =>\n          checkNumbers(element.commonstocksharesauthorized, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      cashandcashequivalentsatcarryingvalue: data\n        .map((element) =>\n          checkNumbers(element.cashandcashequivalentsatcarryingvalue, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      retainedearningsaccumulateddeficit: data\n        .map((element) =>\n          checkNumbers(element.retainedearningsaccumulateddeficit, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      liabilitiesnoncurrent: data\n        .map((element) => checkNumbers(element.liabilitiesnoncurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      propertyplantandequipmentnet: data\n        .map((element) =>\n          checkNumbers(element.propertyplantandequipmentnet, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      commonstocksincludingadditionalpaidincapital: data\n        .map((element) =>\n          checkNumbers(\n            element.commonstocksincludingadditionalpaidincapital,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n      commercialpaper: data\n        .map((element) => checkNumbers(element.commercialpaper, divider))\n        .slice(0, 4)\n        .reverse(),\n      longtermdebtcurrent: data\n        .map((element) => checkNumbers(element.longtermdebtcurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      commonstocksharesoutstanding: data\n        .map((element) =>\n          checkNumbers(element.commonstocksharesoutstanding, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      otherliabilitiesnoncurrent: data\n        .map((element) =>\n          checkNumbers(element.otherliabilitiesnoncurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      marketablesecuritiescurrent: data\n        .map((element) =>\n          checkNumbers(element.marketablesecuritiescurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      otherliabilitiescurrent: data\n        .map((element) =>\n          checkNumbers(element.otherliabilitiescurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      assetscurrent: data\n        .map((element) => checkNumbers(element.assetscurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      longtermdebtnoncurrent: data\n        .map((element) => checkNumbers(element.longtermdebtnoncurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      contractwithcustomerliabilitycurrent: data\n        .map((element) =>\n          checkNumbers(element.contractwithcustomerliabilitycurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      nontradereceivablescurrent: data\n        .map((element) =>\n          checkNumbers(element.nontradereceivablescurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      commonstocksharesissued: data\n        .map((element) =>\n          checkNumbers(element.commonstocksharesissued, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      stockholdersequity: data\n        .map((element) => checkNumbers(element.stockholdersequity, divider))\n        .slice(0, 4)\n        .reverse(),\n      accountsreceivablenetcurrent: data\n        .map((element) =>\n          checkNumbers(element.accountsreceivablenetcurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      accountspayablecurrent: data\n        .map((element) => checkNumbers(element.accountspayablecurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      assets: data\n        .map((element) => checkNumbers(element.assets, divider))\n        .slice(0, 4)\n        .reverse(),\n      assetsnoncurrent: data\n        .map((element) => checkNumbers(element.assetsnoncurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      otherassetscurrent: data\n        .map((element) => checkNumbers(element.otherassetscurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      otherassetsnoncurrent: data\n        .map((element) => checkNumbers(element.otherassetsnoncurrent, divider))\n        .slice(0, 4)\n        .reverse(),\n      inventorynet: data\n        .map((element) => checkNumbers(element.inventorynet, divider))\n        .slice(0, 4)\n        .reverse(),\n      marketablesecuritiesnoncurrent: data\n        .map((element) =>\n          checkNumbers(element.marketablesecuritiesnoncurrent, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      accumulatedothercomprehensiveincomelossnetoftax: data\n        .map((element) =>\n          checkNumbers(\n            element.accumulatedothercomprehensiveincomelossnetoftax,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n    });\n  }\n  return (\n    <div>\n      <h1> Balance Sheet</h1>\n      <table>\n        <tbody>\n          <tr>\n            <th>About</th>\n            {dataInfo.date.map((item) => (\n              <th>{item}</th>\n            ))}\n          </tr>\n          <tr>\n            <td> Liabilities and Stockholders Equity</td>\n            {dataInfo.liabilitiesandstockholdersequity.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Liabilities</td>\n            {dataInfo.liabilities.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Liabilities Current</td>\n            {dataInfo.liabilitiescurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Common Stock Shares Authorized</td>\n            {dataInfo.commonstocksharesauthorized.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Cash and Cash Equivalents at carry ingvalue</td>\n            {dataInfo.cashandcashequivalentsatcarryingvalue.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Retained earnings accumulated deficit</td>\n            {dataInfo.retainedearningsaccumulateddeficit.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Liabilities non-current</td>\n            {dataInfo.liabilitiesnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Cost of goods and services sold</td>\n            {dataInfo.liabilitiesnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Property Plant and Equipment Net</td>\n            {dataInfo.propertyplantandequipmentnet.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Common stocks Including additional paid in capital</td>\n            {dataInfo.commonstocksincludingadditionalpaidincapital.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td> Long Term Debt Current </td>\n            {dataInfo.longtermdebtcurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Common Stock Shares Outstanding </td>\n            {dataInfo.commonstocksharesoutstanding.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Liabilities Non-current </td>\n            {dataInfo.otherliabilitiesnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Marketable Securities Current </td>\n            {dataInfo.marketablesecuritiescurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Liabilities Current </td>\n            {dataInfo.otherliabilitiescurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Assets Current </td>\n            {dataInfo.assetscurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Long Term Debt Non-Current </td>\n            {dataInfo.longtermdebtnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Contract with Customer Liability Current </td>\n            {dataInfo.contractwithcustomerliabilitycurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Non-Trade Receivables Current </td>\n            {dataInfo.nontradereceivablescurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Common Stock Shares Issued </td>\n            {dataInfo.commonstocksharesissued.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Stock Holders Equity </td>\n            {dataInfo.stockholdersequity.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Accounts Receivable Net Current </td>\n            {dataInfo.accountsreceivablenetcurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Accounts Payable Current </td>\n            {dataInfo.accountspayablecurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Assets </td>\n            {dataInfo.assets.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Assets Non-Current </td>\n            {dataInfo.assetsnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Assets Non-Current </td>\n            {dataInfo.otherassetsnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Inventory Net </td>\n            {dataInfo.inventorynet.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Marketable Securities Non-Current </td>\n            {dataInfo.marketablesecuritiesnoncurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Accumulated Other Comprehensive Income Loss Net of Tax </td>\n            {dataInfo.accumulatedothercomprehensiveincomelossnetoftax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td> Other Assets Current </td>\n            {dataInfo.otherassetscurrent.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Context } from \"../Context/Context\";\nimport { financialmodelingprepApikey } from \"../apikey/apikey\";\nimport { divider } from \"./BalanceSheet\";\nimport { checkNumbers } from \"./BalanceSheet\";\n\nexport const IncomeStatement = () => {\n  const [context, setContext] = useContext(Context);\n  const [dataInfo, setDataInfo] = useState({\n    date: [],\n    costofgoodsandservicessold: [],\n    netincomeloss: [],\n    researchanddevelopmentexpense: [],\n    grossprofit: [],\n    othercomprehensiveincomelossreclassificationadjustmentfromaociforsaleofsecuritiesnetoftax:\n      [],\n    othercomprehensiveincomelossderivativeinstrumentgainlossbeforereclassificationaftertax:\n      [],\n    othercomprehensiveincomelossforeigncurrencytransactionandtranslationadjustmentnetoftax:\n      [],\n    weightedaveragenumberofdilutedsharesoutstanding: [],\n    weightedaveragenumberofsharesoutstandingbasic: [],\n    operatingincomeloss: [],\n    nonoperatingincomeexpense: [],\n    incomelossfromcontinuingoperationsbeforeincometaxesextraordinaryitemsnoncontrollinginterest:\n      [],\n    othercomprehensiveincomelossavailableforsalesecuritiesadjustmentnetoftax:\n      [],\n    earningspersharebasic: [],\n    incometaxexpensebenefit: [],\n    othercomprehensiveincomeunrealizedholdinggainlossonsecuritiesarisingduringperiodnetoftax:\n      [],\n    revenuefromcontractwithcustomerexcludingassessedtax: [],\n    earningspersharediluted: [],\n    operatingexpenses: [],\n    othercomprehensiveincomelossderivativeinstrumentgainlossafterreclassificationandtax:\n      [],\n    sellinggeneralandadministrativeexpense: [],\n    othercomprehensiveincomelossderivativeinstrumentgainlossreclassificationaftertax:\n      [],\n    othercomprehensiveincomelossnetoftaxportionattributabletoparent: [],\n    comprehensiveincomenetoftax: [],\n  });\n\n  async function fetchCashFlow() {\n    const res = await fetch(\n      `https://financialmodelingprep.com/api/v3/income-statement-as-reported/${context}?limit=10&apikey=${financialmodelingprepApikey}`\n    );\n    const data = await res.json();\n    console.log(data.date);\n    setDataInfo({\n      date: data\n        .map((element) => checkNumbers(element.date))\n        .slice(0, 4)\n        .reverse(),\n      costofgoodsandservicessold: data\n        .map((element) =>\n          checkNumbers(element.costofgoodsandservicessold, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      netincomeloss: data\n        .map((element) => checkNumbers(element.netincomeloss, divider))\n        .slice(0, 4)\n        .reverse(),\n      researchanddevelopmentexpense: data\n        .map((element) =>\n          checkNumbers(element.researchanddevelopmentexpense, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      grossprofit: data\n        .map((element) => checkNumbers(element.grossprofit, divider))\n        .slice(0, 4)\n        .reverse(),\n      othercomprehensiveincomelossreclassificationadjustmentfromaociforsaleofsecuritiesnetoftax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomelossreclassificationadjustmentfromaociforsaleofsecuritiesnetoftax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      othercomprehensiveincomelossderivativeinstrumentgainlossbeforereclassificationaftertax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomelossreclassificationadjustmentfromaociforsaleofsecuritiesnetoftax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      othercomprehensiveincomelossforeigncurrencytransactionandtranslationadjustmentnetoftax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomelossforeigncurrencytransactionandtranslationadjustmentnetoftax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      weightedaveragenumberofdilutedsharesoutstanding: data\n        .map((element) =>\n          checkNumbers(\n            element.weightedaveragenumberofdilutedsharesoutstanding,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n      weightedaveragenumberofsharesoutstandingbasic: data\n        .map((element) =>\n          checkNumbers(\n            element.weightedaveragenumberofsharesoutstandingbasic,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n      operatingincomeloss: data\n        .map((element) => checkNumbers(element.operatingincomeloss, divider))\n        .slice(0, 4)\n        .reverse(),\n      nonoperatingincomeexpense: data\n        .map((element) =>\n          checkNumbers(element.nonoperatingincomeexpense, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      incomelossfromcontinuingoperationsbeforeincometaxesextraordinaryitemsnoncontrollinginterest:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.incomelossfromcontinuingoperationsbeforeincometaxesextraordinaryitemsnoncontrollinginterest,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      othercomprehensiveincomelossavailableforsalesecuritiesadjustmentnetoftax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomelossavailableforsalesecuritiesadjustmentnetoftax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      earningspersharebasic: data\n        .map((element) => checkNumbers(element.earningspersharebasic))\n        .slice(0, 4)\n        .reverse(),\n      incometaxexpensebenefit: data\n        .map((element) =>\n          checkNumbers(element.incometaxexpensebenefit, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      othercomprehensiveincomeunrealizedholdinggainlossonsecuritiesarisingduringperiodnetoftax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomeunrealizedholdinggainlossonsecuritiesarisingduringperiodnetoftax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      revenuefromcontractwithcustomerexcludingassessedtax: data\n        .map((element) =>\n          checkNumbers(\n            element.revenuefromcontractwithcustomerexcludingassessedtax,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n      earningspersharediluted: data\n        .map((element) => checkNumbers(element.earningspersharediluted))\n        .slice(0, 4)\n        .reverse(),\n      operatingexpenses: data\n        .map((element) => checkNumbers(element.operatingexpenses, divider))\n        .slice(0, 4)\n        .reverse(),\n      othercomprehensiveincomelossderivativeinstrumentgainlossafterreclassificationandtax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomelossderivativeinstrumentgainlossafterreclassificationandtax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      sellinggeneralandadministrativeexpense: data\n        .map((element) =>\n          checkNumbers(element.sellinggeneralandadministrativeexpense, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      othercomprehensiveincomelossderivativeinstrumentgainlossreclassificationaftertax:\n        data\n          .map((element) =>\n            checkNumbers(\n              element.othercomprehensiveincomelossderivativeinstrumentgainlossreclassificationaftertax,\n              divider\n            )\n          )\n          .slice(0, 4)\n          .reverse(),\n      othercomprehensiveincomelossnetoftaxportionattributabletoparent: data\n        .map((element) =>\n          checkNumbers(\n            element.othercomprehensiveincomelossnetoftaxportionattributabletoparent,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n      comprehensiveincomenetoftax: data\n        .map((element) =>\n          checkNumbers(element.comprehensiveincomenetoftax, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n    });\n  }\n  useEffect(() => {\n    fetchCashFlow();\n  }, [context]);\n  console.log(\n    dataInfo.date,\n    dataInfo.othercomprehensiveincomelossnetoftaxportionattributabletoparent\n  );\n  return (\n    <div>\n      <h1> Income Statement </h1>\n      <h6> Numbers to Millions</h6>\n      <table id=\"simple-board\">\n        <tbody>\n          <tr>\n            <th>About</th>\n            {dataInfo.date.map((item) => (\n              <th>{item}</th>\n            ))}\n          </tr>\n          <tr>\n            <td> Cost of goods and services sold</td>\n            {dataInfo.costofgoodsandservicessold.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Net Income Loss</td>\n            {dataInfo.netincomeloss.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Research And Development Expense</td>\n            {dataInfo.researchanddevelopmentexpense.map((item) => (\n              <td> {item === \"\" ? \"N/A\" : item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Gross Profit </td>\n            {dataInfo.grossprofit.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Reclassification Adjustment From a\n              OCI for Sale of securities net of tax\n            </td>\n            {dataInfo.othercomprehensiveincomelossreclassificationadjustmentfromaociforsaleofsecuritiesnetoftax.map(\n              (item) => (\n                <td> {item === NaN ? \"\" : item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Derivative Instrument Gain Loss\n              Before Reclassification After Tax\n            </td>\n            {dataInfo.othercomprehensiveincomelossderivativeinstrumentgainlossafterreclassificationandtax.map(\n              (item) => (\n                <td> {item == NaN ? \"\" : item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Foreign Currency Transaction And\n              Translation Adjustment Net of Tax\n            </td>\n            {dataInfo.othercomprehensiveincomelossforeigncurrencytransactionandtranslationadjustmentnetoftax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Weighted Average Number Of Diluted Shares Outstanding</td>\n            {dataInfo.weightedaveragenumberofdilutedsharesoutstanding.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Weighted Average Number Of Shares Outstanding Basic</td>\n            {dataInfo.weightedaveragenumberofsharesoutstandingbasic.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Operating Income Loss</td>\n            {dataInfo.operatingincomeloss.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Non-Operating Income Expense</td>\n            {dataInfo.nonoperatingincomeexpense.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>\n              Income Loss From Continuing Operations Before Income Taxes\n              Extraordinary Items Non-Controlling Interest\n            </td>\n            {dataInfo.incomelossfromcontinuingoperationsbeforeincometaxesextraordinaryitemsnoncontrollinginterest.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Available For Sale Securities\n              Adjustment Net of Tax\n            </td>\n            {dataInfo.othercomprehensiveincomelossavailableforsalesecuritiesadjustmentnetoftax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Earnings per Share Basic</td>\n            {dataInfo.earningspersharebasic.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Income Tax Expense Benefit</td>\n            {dataInfo.incometaxexpensebenefit.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Unrealized Holding Gain Loss On\n              Securities a Rising During Period Net of Tax\n            </td>\n            {dataInfo.othercomprehensiveincomeunrealizedholdinggainlossonsecuritiesarisingduringperiodnetoftax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Revenue From Contract With Customer Excluding Assessed Tax</td>\n            {dataInfo.revenuefromcontractwithcustomerexcludingassessedtax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Earnings per Share Diluted</td>\n            {dataInfo.earningspersharediluted.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Operating Expenses</td>\n            {dataInfo.operatingexpenses.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Derivative Instrument Gain Loss\n              After Reclassification And Tax\n            </td>\n            {dataInfo.othercomprehensiveincomelossderivativeinstrumentgainlossafterreclassificationandtax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Selling General And Admin Is Rative Expense</td>\n            {dataInfo.sellinggeneralandadministrativeexpense.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Derivative Instrument Gain Loss\n              Reclassification After Tax\n            </td>\n            {dataInfo.othercomprehensiveincomelossderivativeinstrumentgainlossreclassificationaftertax.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>\n              Other Comprehensive Income Loss Net of Tax Portion Attributable to\n              Parent\n            </td>\n            {dataInfo.othercomprehensiveincomelossnetoftaxportionattributabletoparent.map(\n              (item) => (\n                <td>{item}</td>\n              )\n            )}\n          </tr>\n          <tr>\n            <td>Comprehensive Income Net of Tax</td>\n            {dataInfo.comprehensiveincomenetoftax.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"../css/App.css\";\nimport { BrowserRouter, Routes, Switch, Route, Link } from \"react-router-dom\";\n\nexport const BrowseFinancial = () => {\n  return (\n    <div>\n      <ul className=\"BrowserUl\">\n        <Link to=\"/cashflow\">\n          <li className=\"BrowserLi\"> CashFlow </li>\n        </Link>\n        <Link to=\"/incomestatement\">\n          <li className=\"BrowserLi\"> Income Statement </li>\n        </Link>\n\n        <Link to=\"/balancesheet\">\n          <li className=\"BrowserLi\"> Balance Sheet</li>\n        </Link>\n      </ul>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { financialmodelingprepApikey } from \"../apikey/apikey\";\nimport { Context } from \"../Context/Context\";\nimport { checkNumbers } from \"./BalanceSheet\";\nimport { divider } from \"./BalanceSheet\";\nexport const CashFlow = () => {\n  const [context, setContext] = useContext(Context);\n  const [dataInfo, setDataInfo] = useState({\n    date: [],\n    netIncome: [],\n    netincomeloss: [],\n    depreciationAndAmortization: [],\n    deferredIncomeTax: [],\n    stockBasedCompensation: [],\n    changeInWorkingCapital: [],\n    accountsReceivables: [],\n    inventory: [],\n    accountsPayables: [],\n    otherWorkingCapital: [],\n    otherNonCashItems: [],\n    netCashProvidedByOperatingActivities: [],\n    investmentsInPropertyPlantAndEquipment: [],\n    acquisitionsNet: [],\n    purchasesOfInvestments: [],\n    salesMaturitiesOfInvestments: [],\n    otherInvestingActivites: [],\n    netCashUsedForInvestingActivites: [],\n    debtRepayment: [],\n    commonStockIssued: [],\n    commonStockRepurchased: [],\n    dividendsPaid: [],\n    otherFinancingActivites: [],\n    netCashUsedProvidedByFinancingActivities: [],\n    effectOfForexChangesOnCash: [],\n    netChangeInCash: [],\n    cashAtEndOfPeriod: [],\n    cashAtBeginningOfPeriod: [],\n    operatingCashFlow: [],\n    capitalExpenditure: [],\n    freeCashFlow: [],\n  });\n\n  async function fetchIncomeStatement() {\n    const res = await fetch(\n      `https://financialmodelingprep.com/api/v3/cash-flow-statement/${context}?limit=120&apikey=${financialmodelingprepApikey}`\n    );\n    const data = await res.json();\n    setDataInfo({\n      date: data\n        .map((element) => checkNumbers(element.date))\n        .slice(0, 4)\n        .reverse(),\n      netIncome: data\n        .map((element) => checkNumbers(element.netIncome, divider))\n        .slice(0, 4)\n        .reverse(),\n      netincomeloss: data\n        .map((element) => checkNumbers(element.netincomeloss, divider))\n        .slice(0, 4)\n        .reverse(),\n      depreciationAndAmortization: data\n        .map((element) =>\n          checkNumbers(element.depreciationAndAmortization, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      deferredIncomeTax: data\n        .map((element) => checkNumbers(element.deferredIncomeTax, divider))\n        .slice(0, 4)\n        .reverse(),\n      stockBasedCompensation: data\n        .map((element) => checkNumbers(element.stockBasedCompensation, divider))\n        .slice(0, 4)\n        .reverse(),\n      changeInWorkingCapital: data\n        .map((element) => checkNumbers(element.changeInWorkingCapital, divider))\n        .slice(0, 4)\n        .reverse(),\n      accountsReceivables: data\n        .map((element) => checkNumbers(element.accountsReceivables, divider))\n        .slice(0, 4)\n        .reverse(),\n      inventory: data\n        .map((element) => checkNumbers(element.inventory, divider))\n        .slice(0, 4)\n        .reverse(),\n      accountsPayables: data\n        .map((element) => checkNumbers(element.accountsPayables, divider))\n        .slice(0, 4)\n        .reverse(),\n      otherWorkingCapital: data\n        .map((element) => checkNumbers(element.otherWorkingCapital, divider))\n        .slice(0, 4)\n        .reverse(),\n      otherNonCashItems: data\n        .map((element) => checkNumbers(element.otherNonCashItems, divider))\n        .slice(0, 4)\n        .reverse(),\n      netCashProvidedByOperatingActivities: data\n        .map((element) =>\n          checkNumbers(element.netCashProvidedByOperatingActivities, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      investmentsInPropertyPlantAndEquipment: data\n        .map((element) =>\n          checkNumbers(element.investmentsInPropertyPlantAndEquipment, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      acquisitionsNet: data\n        .map((element) => checkNumbers(element.acquisitionsNet, divider))\n        .slice(0, 4)\n        .reverse(),\n      purchasesOfInvestments: data\n        .map((element) => checkNumbers(element.purchasesOfInvestments, divider))\n        .slice(0, 4)\n        .reverse(),\n      salesMaturitiesOfInvestments: data\n        .map((element) =>\n          checkNumbers(element.salesMaturitiesOfInvestments, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      otherInvestingActivites: data\n        .map((element) =>\n          checkNumbers(element.otherInvestingActivites, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      netCashUsedForInvestingActivites: data\n        .map((element) =>\n          checkNumbers(element.netCashUsedForInvestingActivites, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      debtRepayment: data\n        .map((element) => checkNumbers(element.debtRepayment, divider))\n        .slice(0, 4)\n        .reverse(),\n      commonStockIssued: data\n        .map((element) => checkNumbers(element.commonStockIssued, divider))\n        .slice(0, 4)\n        .reverse(),\n      commonStockRepurchased: data\n        .map((element) => checkNumbers(element.commonStockRepurchased, divider))\n        .slice(0, 4)\n        .reverse(),\n      dividendsPaid: data\n        .map((element) => checkNumbers(element.dividendsPaid, divider))\n        .slice(0, 4)\n        .reverse(),\n      otherFinancingActivites: data\n        .map((element) =>\n          checkNumbers(element.otherFinancingActivites, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      netCashUsedProvidedByFinancingActivities: data\n        .map((element) =>\n          checkNumbers(\n            element.netCashUsedProvidedByFinancingActivities,\n            divider\n          )\n        )\n        .slice(0, 4)\n        .reverse(),\n      effectOfForexChangesOnCash: data\n        .map((element) =>\n          checkNumbers(element.effectOfForexChangesOnCash, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      netChangeInCash: data\n        .map((element) => checkNumbers(element.netChangeInCash, divider))\n        .slice(0, 4)\n        .reverse(),\n      cashAtEndOfPeriod: data\n        .map((element) => checkNumbers(element.cashAtEndOfPeriod, divider))\n        .slice(0, 4)\n        .reverse(),\n      cashAtBeginningOfPeriod: data\n        .map((element) =>\n          checkNumbers(element.cashAtBeginningOfPeriod, divider)\n        )\n        .slice(0, 4)\n        .reverse(),\n      operatingCashFlow: data\n        .map((element) => checkNumbers(element.operatingCashFlow, divider))\n        .slice(0, 4)\n        .reverse(),\n      capitalExpenditure: data\n        .map((element) => checkNumbers(element.capitalExpenditure, divider))\n        .slice(0, 4)\n        .reverse(),\n      freeCashFlow: data\n        .map((element) => checkNumbers(element.freeCashFlow, divider))\n        .slice(0, 4)\n        .reverse(),\n    });\n  }\n  useEffect(() => {\n    fetchIncomeStatement();\n  }, [context]);\n  return (\n    <div>\n      <h1> Income Statement</h1>\n      <h6> Numbers to Millions</h6>\n      <table>\n        <tbody>\n          <tr>\n            <th>About</th>\n            {dataInfo.date.map((item) => (\n              <th>{item}</th>\n            ))}\n          </tr>\n          <tr>\n            <td> Net Income</td>\n            {dataInfo.netIncome.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Depreciation and Amortization</td>\n            {dataInfo.depreciationAndAmortization.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Deferred Income Tax</td>\n            {dataInfo.deferredIncomeTax.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Stock Based Compensation</td>\n            {dataInfo.stockBasedCompensation.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Change In Working Capital</td>\n            {dataInfo.changeInWorkingCapital.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Accounts Receivables</td>\n            {dataInfo.accountsReceivables.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Inventory</td>\n            {dataInfo.inventory.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Accounts Payables</td>\n            {dataInfo.accountsPayables.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Working Capital</td>\n            {dataInfo.otherWorkingCapital.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Non-Cash Items</td>\n            {dataInfo.otherNonCashItems.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Net Cash Provided By Operating Activities</td>\n            {dataInfo.netCashProvidedByOperatingActivities.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Investments In Property Plant And Equipment</td>\n            {dataInfo.investmentsInPropertyPlantAndEquipment.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Acquisitions Net</td>\n            {dataInfo.acquisitionsNet.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Purchases Of Investments</td>\n            {dataInfo.purchasesOfInvestments.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Sales Maturities Of Investments</td>\n            {dataInfo.salesMaturitiesOfInvestments.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Investing Activites</td>\n            {dataInfo.otherInvestingActivites.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Net Cash Used For Investing Activites</td>\n            {dataInfo.netCashUsedForInvestingActivites.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Debt Repayment</td>\n            {dataInfo.debtRepayment.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Common Stock Issued</td>\n            {dataInfo.commonStockIssued.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Common Stock Repurchased</td>\n            {dataInfo.commonStockRepurchased.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Dividends Paid</td>\n            {dataInfo.dividendsPaid.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Other Financing Activites</td>\n            {dataInfo.otherFinancingActivites.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Net Cash Used Provided By Financing Activities</td>\n            {dataInfo.otherFinancingActivites.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Effect Of Forex Changes On Cash</td>\n            {dataInfo.effectOfForexChangesOnCash.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Net Change In Cash</td>\n            {dataInfo.netChangeInCash.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Cash At End Of Period</td>\n            {dataInfo.cashAtEndOfPeriod.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Cash At Beginning Of Period</td>\n            {dataInfo.cashAtBeginningOfPeriod.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Operating Cash Flow</td>\n            {dataInfo.operatingCashFlow.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Capital Expenditure</td>\n            {dataInfo.capitalExpenditure.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n          <tr>\n            <td> Free Cash Flow</td>\n            {dataInfo.freeCashFlow.map((item) => (\n              <td>{item}</td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter, Routes, Switch, Route, Link } from \"react-router-dom\";\nimport { BrowseFinancial } from \"../NavBar/BrowseFinancial\";\nimport { BalanceSheet } from \"./BalanceSheet\";\nimport { IncomeStatement } from \"./IncomeStatement\";\nimport { CashFlow } from \"./CashFlow\";\n\nexport const BrowseBar = () => {\n  return (\n    <BrowserRouter>\n      <div>\n        <BrowseFinancial />\n        <Routes>\n          <Route path=\"/cashflow\" element={<CashFlow />} />\n          <Route path=\"/incomestatement\" element={<IncomeStatement />} />\n          <Route path=\"/balancesheet\" element={<BalanceSheet />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n","import React from \"react\";\nimport \"../css/App.css\";\nexport default function Border({ children, nameClass }) {\n  return <div className={nameClass}> {children}</div>;\n}\n\n// A re-usable Border Component-Container\n","import Border from \"../Border/Border\";\nimport React, { useContext } from \"react\";\nimport \"../css/App.css\";\nimport { useState, useEffect } from \"react\";\nimport { Context } from \"../Context/Context\";\n//importing Hooks and Components\n//\n//\nexport default function InputForm() {\n  const [value, setValue] = useState(\"\"); //Initiaze State\n  const [context, setContext] = useContext(Context);\n  const getValue = (e) => {\n    setValue(e.target.value.toUpperCase());\n  };\n  // getValue function sets a value typed by the user in uppercase to state\n\n  const onSubmit = (e) => {\n    setContext(value);\n    e.preventDefault();\n  };\n  // onSubmit function sets the value of the context according to what the user typed\n  return (\n    <Border nameClass=\"Border\">\n      <div className=\"InputPlacement\">\n        <p> Enter a stock symbol :</p>\n        <input type=\"text\" onChange={getValue} maxlength=\"4\"></input>\n        <h1> For example: AAPL </h1>\n        <input type=\"submit\" className=\"Submit\" onClick={onSubmit}></input>\n      </div>\n    </Border>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./css/App.css\";\nimport NavBar from \"./NavBar/NavBar\";\nimport News from \"../src/News/News\";\nimport ChartLine from \"./Charts/ChartLine\";\nimport { Context } from \"./Context/Context\";\nimport { RevenueEarning } from \"./Charts/RevenueEarning\";\nimport { Recommendation } from \"./Financials/Recommendation\";\nimport { CashFlow } from \"./Financials/IncomeStatement\";\nimport { BrowseBar } from \"./Financials/BrowseBar\";\nimport { BrowseFinancial } from \"./NavBar/BrowseFinancial\";\nimport InputForm from \"../src/InputForm/InputForm\";\nfunction App() {\n  const [context, setContext] = useState(\"AAPL\");\n  return (\n    <div className=\"App\">\n      <Context.Provider value={[context, setContext]}>\n        <InputForm></InputForm>\n        <BrowseBar></BrowseBar>\n        <ChartLine></ChartLine>\n        <RevenueEarning></RevenueEarning>\n        <Recommendation></Recommendation>\n        {/* <StockScreener></StockScreener> */}\n        {/* <NavBar></NavBar> */}\n        {/* <News></News> */}\n      </Context.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}